
C==============================================================================
C  SAMPLE
C==============================================================================
C
C  Description:
C  ------------
C Prod2ntu version for root tuple
C  Language:
C  ---------
C  KLOE Fortran
C
C  Author:
C  -------
C Elena Perez del Rio
C
C
C==============================================================================
      SUBROUTINE SAMIN
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT

$$include 'sample.inc'
C
C==============================================================================
C
      write(*,*)"SAMIN"
      call inittree()
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRI
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'k$inc:jobsta.inc'
C
C External functions
C
      INTEGER    ANPIST
C
C Local declarations
C
      INTEGER    Status, istat, fillbposcommon
C
C==============================================================================
C
C Put A_C Error Code to SUCCESS at Run_Init
C
      Status = ANPIST(ANSUCC)
      istat = fillbposcommon(nrun)
C
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMEV
C==============================================================================
C
$$IMPLICIT
$$include 'ybos$library:errcod.inc'
$$include 'c$inc:bcs.inc'
$$include 'c$inc:erlevl.inc'
$$include 'k$inc:oferco.inc'
$$include 'k$inc:jobsta.inc'
$$include 'k$inc:runtyp.inc'
$$include 'k$inc:bpoybs.inc'
c$$Include 'maxstructdim.inc'
$$include 'k$itls:maxstructdim.inc'
$$include 'k$itrg:maxtrgchan.inc'
$$include 'k$itls:emcstruct.inc'        ! Emc Clusters
$$include 'k$itls:evtstruct.inc'  	! Event Information
$$include 'k$itls:geanfistruct.inc'            ! Geanfi Information
$$include 'k$itls:vtxstru.inc'		        ! Charge Verticies
$$include 'k$itls:celestruct.inc'	! Calorimeter Elements
$$include 'k$itls:trkstru.inc'		        ! Tracks
$$include 'k$itls:dprs_struct.inc'             ! DPRS patterns
$$include 'k$itls:dhspstru.inc'
$$include 'k$itls:tclostruct.inc'	! Tracks-to-Clusters
$$include 'k$itls:cfhistruct.inc'       ! Calorimeter First Hit
$$include 'k$itls:qihistruct.inc'       ! QIHI common block
$$include 'k$itls:qcalstruct.inc'       ! QCAL common block
$$include 'k$itrg:telestruct.inc'
$$include 'k$itrg:pizzastruct.inc'
$$include 'k$itls:preclustruct.inc'
$$include 'k$itls:nvostru.inc'
$$include 'k$itls:eclostru.inc'
$$include 'k$itls:t0struct.inc'
$$include 'k$itls:cwrkstruct.inc'
$$include 'k$itls:tellina.inc'
$$include 'k$itls:pizzetta.inc'
$$include 'k$itrg:trgstruct.inc'
$$include 'k$itls:eclsstru.inc'
$$include 'k$itls:gdchitstru.inc'
$$include 'k$itls:bposstruct.inc'
$$include 'k$itls:trkqstru.inc'
$$include 'k$itls:dtcestruct.inc'
$$include 'k$itls:dhrestruct.inc'
$$include 'k$itls:sec2clustru.inc'
$$include 'k$itls:cspsstruct.cin'
$$include 'k$itls:cluostruct.cin'
$$include 'k$itls:cluomcstruct.cin'
$$include 'k$itls:dhitstruct.cin'
$$include 'k$itls:dedx2stru.inc'
$$INCLUDE 'K$ITLS:eleqcaltstru.inc' !QCALT
c$$INCLUDE 'K$ITLS:qcalthitstru.cin' !QCALT hit Struc
$$INCLUDE 'K$ITLS:ele2hitqcalt.cin'    ! QCALT hit structure
$$INCLUDE 'K$ITLS:CCALTNUM.INC'        ! CCALT stu dimensioner
$$INCLUDE 'K$ITLS:ccaltstru.inc'   ! CCALT Stru
$$INCLUDE 'k$itls:letestruct.cin'  !LET Stru
c$$INCLUDE 'k$itls:raw2itce.cin'  ! IT Stru
$$INCLUDE 'k$itls:itcestruct.cin'  ! IT Stru
$$INCLUDE 'k$itls:hetenum.cin'      ! HET max dim
$$INCLUDE 'k$itls:hetestru.cin'  !LET Stru
$$include 'k$itls:prod2ntu.inc'
$$include 'k$itls:prod2ntu_talk.inc'
$$include 'sample.inc'
   
C
C All the declarations are moved in sample.cin
C What are the following lines? I maintain here at the moment to 
C let fix the "RunNumber" issue. 
C TODO: Move them to sample.cin
C
C NOTE1: trgwrd1/2 are used in block EVTTRG and if no other you, 
C they can be removed. Now they are commented
C
      INTEGER istat, OldRunNumber
      data OldRunNumber/0/
      save OldRunNumber
      integer ind1,inddat
C      Integer trgwrd1,trgwrd2,numdhit
C      common /trgcom/trgwrd1,trgwrd2,numdhit
      Integer numdhit
      common /trgcom/numdhit
      LOGICAL mcflag_1
      INTEGER mcflag_tg
C
C=============================================================================
C Start of Code:
C=============================================================================
      IF( exptyp.eq.exofsi )then ! Simulation
         mcflag_1 = .true.
      else
         mcflag_1 = .false.
      endif

      If (mcflag_1) then
         mcflag_tg=1
      Else
         mcflag_tg=0
      EndIf
C-----------------------------------------------------------------------------
C Fill event classification information
C-----------------------------------------------------------------------------
      IF( mcflag_1 )  THEN
         istat = GETEVCL(evt%Info)
C         istat = BLOCAT(iw,'EVCL',1,ind1,inddat)
C   Moved to the Block definition
C         IF( TRIGFLAG ) THEN
C           trgwrd1 = IW( inddat+1 )
C           trgwrd2 = IW( inddat+2 )
C         ENDIF
         
      ELSE
         istat = GETTIME(timesec,timemusec)
         timesec = timesec-946080000  ! Reduce the timing
         ISTAT = BIGEST(IW,'EVCL',BNKNUM)
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('PROD2NTU_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')

         END IF
         ISTAT = BLOCAT(IW,'EVCL',BNKNUM,IND1,INDDAT )
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('PROD2NTU_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')
            

         END IF
        
         icurr = IW(INDDAT+5)
         IPos=iand(icurr,'FFFF'x)*1.e-4
         IEle=(icurr/2**16)*1.e-4
         Lumi= iw(inddat+6)*1.e-6         
      ENDIF
C-----------------------------------------------------------------------
C Fill Block evtinfo
C-----------------------------------------------------------------------
      IF(mcflag_1)THEN
         istat=blocat(iw,'BRID',1,ind1,inddat)
         Evt%Info%RunNumber = iw(inddat)
         IF(Evt%Info%RunNumber.ne.OldRunNumber)THEN
            istat = fillbposcommon(Evt%Info%RunNumber)
            OldRunNumber = Evt%Info%RunNumber
         END IF
      ELSE
         Evt%Info%RunNumber = Nrun
      END IF
      Evt%Info%EventNumber = Nev
        
      NumRun = Evt%Info%RunNumber
      NumEv = Evt%Info%EventNumber
      Pileup = Evt%Info%Pileup
      GCod = Evt%Info%GenCod
      PhiD = Evt%Info%PhiDecay
      A1Typ = Evt%Info%A1type
      A2Typ = Evt%Info%A2type
      A3Typ = Evt%Info%A3type
      B1Typ = Evt%Info%B1type
      B2Typ = Evt%Info%B2type
      B3Typ = Evt%Info%B3type

C-----------------------------------------------------------------------
C Fill Block evtecls 
C-----------------------------------------------------------------------
      nEcls = 0
      EclTrgw = 0
      EclFilfo = 0
      DO iecls=1,8
        EclWord(iecls) = 0
        EclStream(iecls) = 0
        EclTagNum(iecls) = 0
        EclEvType(iecls) = 0
      END DO
      
      nEcls2 = 0
      EclTrgw2 = 0
      EclFilfo2 = 0
      DO iecls2=1,8
        EclWord2(iecls2) = 0
        EclStream2(iecls2) = 0
        EclTagNum2(iecls2) = 0
        EclEvType2(iecls2) = 0
      END DO

      istat = GETECLS(evt%ecls)
        
      necls = evt%ecls%n
      IF (nEcls > 0 .OR. nEcls <= 8) THEN
        EclTrgw = evt%ecls%trigger
        EclFilfo = evt%ecls%filfo
        DO iecls=1,necls
          EclWord(iecls) = evt%ecls%TotWord(iecls)
          EclStream(iecls) = evt%ecls%Stream(iecls)
          EclTagNum(iecls) = evt%ecls%TagNum(iecls)
          EclEvType(iecls) = evt%ecls%EvnTyp(iecls)
        END DO
      ELSE
        WRITE(*,*) 'ERROR EVTC2TRIG - NClu2s Out of bound : ', NClu2s
      END IF
      
      nEcls2 = evt%ecls%n2

      IF (nEcls2 > 0 .OR. nEcls <= 8) THEN
        EclTrgw2 = evt%ecls%trigger2
        EclFilfo2 = evt%ecls%filfo2
        DO iecls2=1,necls2
          EclWord2(iecls2) = evt%ecls%TotWord2(iecls2)
          EclStream2(iecls2) = evt%ecls%Stream2(iecls2)
          EclTagNum2(iecls2) = evt%ecls%TagNum2(iecls2)
          EclEvType2(iecls2) = evt%ecls%EvnTyp2(iecls2)
        END DO
      ELSE
        WRITE(*,*) 'ERROR EVTC2TRIG - NClu2s Out of bound : ', NClu2s
      END IF

C-----------------------------------------------------------------------
C Fill Block evtbpos
C-----------------------------------------------------------------------
      BPx = 0.
      BPy = 0.
      BPz = 0.
      Bx = 0.
      By = 0.
      Bz = 0.
      BWidPx = 0.
      BWidPy = 0.
      BWidPz = 0.
      BSx = 0.
      BSy = 0.
      BSz = 0.
      BLumx = 0.
      BLumz = 0.
      Broots = 0.
      BrootsErr = 0.

      rstat = GETBPOS(Evt%Bpos)

      BPx = Evt%Bpos%px
      BPy = Evt%Bpos%py
      BPz = Evt%Bpos%pz
      Bx = Evt%Bpos%x
      By = Evt%Bpos%y
      Bz = Evt%Bpos%z
      BWidPx = Evt%Bpos%errpx
      BWidPy = Evt%Bpos%errpy
      BWidPz = Evt%Bpos%errpz
      BSx = Evt%Bpos%errx
      BSy = Evt%Bpos%erry
      BSz = Evt%Bpos%errz
      BLumx = Evt%Bpos%lumx
      BLumz = Evt%Bpos%lumz
      Broots = Evt%Bpos%Ene
      BrootsErr = Evt%Bpos%ErrEne
C-----------------------------------------------------------------------
C Fill Block evtgdhit
C-----------------------------------------------------------------------
      DtceHit = 0.
      DhreHit = 0.
      DprsHit = 0.
      DtfsHit = 0.

      istat = BIGEST(iw,'DTCE',banknum)
      istat = BLOCAT(iw,'DTCE',banknum,ind1,inddat)
      IF( istat.ne.YESUCC ) THEN
        NDtce =0
      ELSE
        NDtce = IW(inddat+DTCNRO)
      ENDIF
      CALL GETGDCHIT(Evt%GHit)

      DtceHit = NDtce
      DhreHit = Evt%GHit%nhit
      DprsHit = Evt%GHit%nhpr
      DtfsHit = Evt%GHit%nhtf
C-----------------------------------------------------------------------
C Fill Block evttrig
C-----------------------------------------------------------------------
      istat = BLOCAT(iw,'EVCL',1,ind1,inddat)
      Trgw1 = IW( inddat+1 )
      Trgw2 = IW( inddat+2 )
C-----------------------------------------------------------------------
C Fill Block evtc2trig
C-----------------------------------------------------------------------
      NSec = 0.
      NSec_NoClu = 0.
      NSec2Clu = 0.
      NClu2s = 0.
      DO iC2Trig=1,100
        NNorm(iC2Trig)   = 0.
        NormAdd(iC2Trig) = 0.
        NOver(iC2Trig)   = 0.
        OverAdd(iC2Trig) = 0.
        NCosm(iC2Trig)   = 0.
        CosmAdd(iC2Trig) = 0.
      END DO

      istat = GETSEC2CLUSTRU(evt%s2clu)

      NSec = Evt%S2CLU%nsect
      NSec_NoClu = Evt%S2CLU%nsect_noclu
      NSec2Clu = Evt%S2CLU%nsect_clu
      NClu2s = Evt%S2CLU%Nclus

      IF (NClu2s > 0 .OR. NClu2s <= 100) THEN
        DO iC2Trig=1,NClu2s
          NNorm(iC2Trig)   = Evt%S2CLU%Nnorm(iC2Trig)
          NormAdd(iC2Trig) = Evt%S2CLU%NormAdd(iC2Trig)
          NOver(iC2Trig)   = Evt%S2CLU%Nover(iC2Trig)
          OverAdd(iC2Trig) = Evt%S2CLU%OverAdd(iC2Trig)
          NCosm(iC2Trig)   = Evt%S2CLU%Ncosm(iC2Trig)
          CosmAdd(iC2Trig) = Evt%S2CLU%CosmAdd(iC2Trig)
        END DO
      ELSE
        WRITE(*,*) 'ERROR EVTC2TRIG - NClu2s Out of bound : ', NClu2s
      END IF
C-----------------------------------------------------------------------
C Fill Block tellina
C-----------------------------------------------------------------------
      NTel = 0.
      DO iTELLINA=1, 1000
        Add_Tel(iTELLINA) = 0.
        Bitp_Tel(iTELLINA) = 0.
        Ea_Tel(iTELLINA) = 0.
        Eb_Tel(iTELLINA) = 0.
        Ta_Tel(iTELLINA) = 0.
        Tb_Tel(iTELLINA) = 0.
      END DO

      istat = GETTELLINA(Evt%Tellina) 

      NTel = Evt%Tellina%n
      IF (NTel > 0 .OR. NTel <= 1000) THEN
        DO iTELLINA=1, NTel
          Add_Tel(iTELLINA) = Evt%Tellina%add(iTELLINA)
          Bitp_Tel(iTELLINA) = Evt%Tellina%Bitp(iTELLINA)
          Ea_Tel(iTELLINA) = Evt%Tellina%Ea(iTELLINA)
          Eb_Tel(iTELLINA) = Evt%Tellina%Eb(iTELLINA)
          Ta_Tel(iTELLINA) = Evt%Tellina%Ta(iTELLINA)
          Tb_Tel(iTELLINA) = Evt%Tellina%Tb(iTELLINA)
        END DO
      ELSE
        WRITE(*,*) 'ERROR TELLINA - NTel Out of bound : ', NTel
      END IF

C-----------------------------------------------------------------------
C Fill Block pizzetta
C-----------------------------------------------------------------------
      NPiz = 0.
      DO iPIZZETTA=1, 1000
        Add_Piz(iPIZZETTA) = 0.
        Ea_Piz(iPIZZETTA)  = 0.
        Eb_Piz(iPIZZETTA)  = 0.
        E_Piz(iPIZZETTA)   = 0.
        Z_Piz(iPIZZETTA)   = 0.
      END DO

      istat = GETPIZZETTA(Evt%Pizzetta)

      NPiz = Evt%Pizzetta%n
      IF (NPiz > 0 .OR. NPiz <= 1000) THEN
        DO iPIZZETTA=1, NPiz
          Add_Piz(iPIZZETTA) = Evt%Pizzetta%Add(iPIZZETTA)
          Ea_Piz(iPIZZETTA)  = Evt%Pizzetta%Ea(iPIZZETTA)
          Eb_Piz(iPIZZETTA)  = Evt%Pizzetta%Eb(iPIZZETTA)
          E_Piz(iPIZZETTA)   = Evt%Pizzetta%E_Rec(iPIZZETTA)
          Z_Piz(iPIZZETTA)   = Evt%Pizzetta%Z_Mod(iPIZZETTA)
        END DO
      ELSE
        WRITE(*,*) 'ERROR PIZZETTA - NPiz Out of bound : ', NPiz
      END IF
C-----------------------------------------------------------------------
C Fill Block evttime
C-----------------------------------------------------------------------
      istat = T0GLRD(T0Dc0,T0Hit0,T0Clu0,T0Step1,DelayCable,TBunch)
      istat = T0MCRD(TPhased_mc)
        
      call fillntu() 	
CC End of code
C============
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRE
C==============================================================================
C
$$IMPLICIT
C
C==============================================================================
C
      RETURN 
      END
C

C==============================================================================
      SUBROUTINE SAMHB
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'C$INC:ERLEVL.INC'
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'sample.inc'
C
C Local declarations
C
      INTEGER    Status, MinHisId, MaxHisId
      INTEGER    NtuId
      LOGICAL    HisFlg
C
C==============================================================================
C
      RETURN 
      END
C
C==============================================================================
      SUBROUTINE SAMTK
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'A_C_LIBRARY:ANERROR.INC'
$$INCLUDE 'S_I$LIBRARY:NOARGINC.INC'
$$include 'sample.inc'
C
C External functions
C
      INTEGER   UIDFFI, UIUSGP, UIACME, UIGTYE
C
C Local declarations
C
      INTEGER   Status, MENUF, MENUL, IGROUP
      CHARACTER Verb*40, Prompt*100
C
C==============================================================================
C
      Status=UIDFFI( 
     $'$SAMPLE/sample.uid'
     $,IGROUP,MENUF,N$A,N$A,MENUL,N$A )
      Status = UIUSGP(IGROUP,N$A)
 10   Status = UIACME(MENUF,Verb,N$A) ! Display menu
C     
      if(verb.eq.'SHOW')then
         goto 10
      end if
      
      RETURN
      END
C     

C=============================================================================
      SUBROUTINE SAMFI
C===========================================================================
	write(*,*)'Run End routine'
      	call closetree() 

      RETURN
      END
C
C===========================================================================














